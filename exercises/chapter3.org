#+STARTUP: indent
#+OPTIONS: num:nil
* Chapter 3

Lists

** Exercise 3.1

   #+BEGIN_SRC sml
     fun maxl ns =
        if null ns
           then raise Empty
        else let val n = hd ns
                 val ns' = tl ns
             in
                if null ns'
                   then n
                else let val n' = hd ns'
                         val ns'' = tl ns'
                     in
                        if n < n'
                           then maxl (n' :: ns'')
                        else maxl (n :: ns'')
                     end
             end
   #+END_SRC

   #+RESULTS:
   : val maxl = fn : int list -> int

** Exercise 3.2

   #+BEGIN_SRC sml
     val rec last =
        fn [] => raise Empty
         | [x] => x
         | _ :: xs => last xs
   #+END_SRC

   #+RESULTS:
   : val last = fn : 'a list -> 'a

** Exercise 3.3

=take= returns the whole list on the former, the empty list on the
latter.

=drop= returns the empty list on the former, the whole list on the
latter.

#+BEGIN_SRC sml
  fun take ([], _) = []
    | take (x :: xs, i) = if i > 0
                             then x :: take (xs, i - 1)
                          else []

  fun drop ([], _) = []
    | drop (x :: xs, i) = if i > 0
                             then drop (xs, i - 1)
                          else x :: xs

  fun test () = let val l = [1, 2, 3]
                in
                   (take (l, 4),
                    take (l, ~1),
                    drop (l, 4),
                    drop (l, ~1))
                end
#+END_SRC

#+RESULTS:
: val take = fn : 'a list * int -> 'a list
: val drop = fn : 'a list * int -> 'a list
: val test = fn : unit -> int list * int list * int list * int list

** Exercise 3.4

#+BEGIN_SRC sml
  val rec nth =
     fn ([], _) => raise Empty
      | (x :: _, 0) => x
      | (_ :: xs, n) => nth (xs, n - 1)
#+END_SRC

#+RESULTS:
: val nth = fn : 'a list * int -> 'a

** Exercise 3.5

#+BEGIN_SRC sml
  infixr 5 @

  fun ([] @ ys) = ys
    | (xs @ []) = xs
    | ((x :: xs) @ ys) = x :: (xs @ ys)
#+END_SRC

#+RESULTS:
: infixr 5 @
: val @ = fn : 'a list * 'a list -> 'a list

** Exercise 3.6

Then =x= must be a list, and =nrev xs= must be the same kind of list,
and =nrev= takes a list of such lists as its argument, i.e.

=nrev: 'a list list -> 'a list=

and

=nrev [[1,2,3],[4,5,6],[7]]= ==> =[7,4,5,6,1,2,3]=.

#+BEGIN_SRC sml
  fun nrev' [] = []
    | nrev' (x :: xs) = (nrev' xs) @ x
#+END_SRC

#+RESULTS:
: val nrev' = fn : 'a list list -> 'a list

** Exercise 3.7
