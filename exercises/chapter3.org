#+STARTUP: indent
#+OPTIONS: num:nil
* Chapter 3

Lists

** Exercise 3.1

   #+BEGIN_SRC sml
     fun maxl ns =
        if null ns
           then raise Empty
        else let val n = hd ns
                 val ns' = tl ns
             in
                if null ns'
                   then n
                else let val n' = hd ns'
                         val ns'' = tl ns'
                     in
                        if n < n'
                           then maxl (n' :: ns'')
                        else maxl (n :: ns'')
                     end
             end
   #+END_SRC

   #+RESULTS:
   : val maxl = fn : int list -> int

** Exercise 3.2

   #+BEGIN_SRC sml
     val rec last =
        fn [] => raise Empty
         | [x] => x
         | _ :: xs => last xs
   #+END_SRC

   #+RESULTS:
   : val last = fn : 'a list -> 'a

** Exercise 3.3

=take= returns the whole list on the former, the empty list on the
latter.

=drop= returns the empty list on the former, the whole list on the
latter.

#+BEGIN_SRC sml
  fun take ([], _) = []
    | take (x :: xs, i) = if i > 0
                             then x :: take (xs, i - 1)
                          else []

  fun drop ([], _) = []
    | drop (x :: xs, i) = if i > 0
                             then drop (xs, i - 1)
                          else x :: xs

  fun test () = let val l = [1, 2, 3]
                in
                   (take (l, 4),
                    take (l, ~1),
                    drop (l, 4),
                    drop (l, ~1))
                end
#+END_SRC

#+RESULTS:
: val take = fn : 'a list * int -> 'a list
: val drop = fn : 'a list * int -> 'a list
: val test = fn : unit -> int list * int list * int list * int list

** Exercise 3.4

#+BEGIN_SRC sml
  val rec nth =
     fn ([], _) => raise Empty
      | (x :: _, 0) => x
      | (_ :: xs, n) => nth (xs, n - 1)
#+END_SRC

#+RESULTS:
: val nth = fn : 'a list * int -> 'a

** Exercise 3.5

#+BEGIN_SRC sml
  infixr 5 @

  fun ([] @ ys) = ys
    | (xs @ []) = xs
    | ((x :: xs) @ ys) = x :: (xs @ ys)
#+END_SRC

#+RESULTS:
: infixr 5 @
: val @ = fn : 'a list * 'a list -> 'a list

** Exercise 3.6

Then =x= must be a list, and =nrev xs= must be the same kind of list,
and =nrev= takes a list of such lists as its argument, i.e.

=nrev: 'a list list -> 'a list=

and

=nrev [[1,2,3],[4,5,6],[7]]= ==> =[7,4,5,6,1,2,3]=.

#+BEGIN_SRC sml
  fun nrev' [] = []
    | nrev' (x :: xs) = (nrev' xs) @ x
#+END_SRC

#+RESULTS:
: val nrev' = fn : 'a list list -> 'a list

** Exercise 3.7

#+BEGIN_SRC sml
  structure Expr =
     struct

        exception ToList

        datatype expr =
           Enil
         | Econs of int * expr
         | Econs' of int * expr   (* evaluated Econs *)
         | Eapp of expr * expr
         | Enrev of expr
         | ErevAppend of expr * expr
         | Erev of expr

        fun toList Enil = []
          | toList (Econs' (x, xs)) = x :: toList xs
          | toList _ = raise ToList

        val fromList = foldr Econs' Enil

        fun isValue e =
           case e of
              Enil => true
            | Econs' _ => true
            | _ => false

        fun toString l =
           case l of
              Enil => "[]"
            | Econs (x, xs) => concat [Int.toString x,
                                       " :: (",
                                       toString xs,
                                       ")"]
            | Econs' _ => concat ["[",
                                  String.concatWith ","
                                                    (map Int.toString
                                                         (toList l)),
                                  "]"]
            | Eapp (xs, ys) => concat ["(",
                                       toString xs,
                                       ") @ (",
                                       toString ys,
                                       ")"]
            | Enrev xs => concat ["nrev (",
                                  toString xs,
                                  ")"]
            | ErevAppend (xs, ys) => concat ["revAppend (",
                                             toString xs,
                                             ", ",
                                             toString ys,
                                             ")"]
            | Erev xs => concat ["rev (",
                                 toString xs,
                                 ")"]

        fun step e =
           case e of
              Enil => e
            | Econs (x, xs) => if isValue xs
                                  then Econs' (x, xs)
                               else Econs (x, step xs)
            | Econs' _ => e
            | Eapp (Enil, ys) => if isValue ys
                                    then ys
                                 else Eapp (Enil, step ys)
            | Eapp (u as Econs' (x, xs), ys) =>
                 if isValue ys
                    then Econs (x, Eapp (xs, ys))
                 else Eapp (u, step ys)
            | Eapp (xs, ys) => Eapp (step xs, ys)
            | Enrev Enil => Enil
            | Enrev (u as Econs' (x, xs)) =>
                 Eapp (Enrev xs, Econs (x, Enil))
            | Enrev xs => Enrev (step xs)
            | ErevAppend (Enil, ys) => if isValue ys
                                          then ys
                                       else ErevAppend (Enil, step ys)
            | ErevAppend (u as Econs' (x, xs), ys) =>
                 if isValue ys
                    then ErevAppend (xs, Econs (x, ys))
                 else ErevAppend (u, step ys)
            | ErevAppend (xs, ys) => ErevAppend (step xs, ys)
            | Erev xs => if isValue xs
                            then ErevAppend (xs, Enil)
                         else Erev (step xs)

        fun stepN e n = if n < 1 then e else stepN (step e) (n - 1)

        fun run e n =
          (String.concatWith " ==>\n"
                             (map toString
                                  (List.tabulate (n, (stepN e))))) ^ "\n"

        fun test () =
          let val foo = fromList [1,2,3,4]
          in
             print "> nrev <\n"
             ; print (run (Enrev foo) 26)
             ; print "\n"
             ; print "> rev <\n"
             ; print (run (Erev foo) 11)
          end

     end
#+END_SRC

#+RESULTS:
#+begin_example
structure Expr :
  sig
    exception ToList
    datatype expr
      = Eapp of expr * expr
      | Econs of int * expr
      | Econs' of int * expr
      | Enil
      | Enrev of expr
      | Erev of expr
      | ErevAppend of expr * expr
    val toList : expr -> int list
    val fromList : int list -> expr
    val isValue : expr -> bool
    val toString : expr -> string
    val step : expr -> expr
    val stepN : expr -> int -> expr
    val run : expr -> int -> string
    val test : unit -> unit
  end
#+end_example

** Exercise 3.8

They both do the same thing, and require about the same number of
steps, but =f= builds up such that it needs space for every element in
every list; while =concat= needs space for all the sublists, it only
works on the elements of each one at a time.  (So =f= potentially
leads to much deeper recursion.)

#+BEGIN_SRC sml
  infixr 5 @
  fun ([] @ ys) = ys
    | ((x :: xs) @ ys)  = x :: (xs @ ys)

  fun concat [] = []
    | concat (l :: ls) = l @ concat ls

  fun f [] = []
    | f ([] :: ls) = f ls
    | f ((x :: l) :: ls) = x :: f (l :: ls)
#+END_SRC

#+RESULTS:
: infixr 5 @
: val @ = fn : 'a list * 'a list -> 'a list
: val concat = fn : 'a list list -> 'a list
: val f = fn : 'a list list -> 'a list

** Exercise 3.9

#+BEGIN_SRC sml
  fun zip ([], _) = []
    | zip (_, []) = []
    | zip (x :: xs, y :: ys) = (x, y) :: zip (xs, ys)
#+END_SRC

#+RESULTS:
: val zip = fn : 'a list * 'b list -> ('a * 'b) list

** Exercise 3.10

=take= builds up recursions as long as the list, but only builds it
once.  =rtake= builds it twice, but iteratively.

#+BEGIN_SRC sml
  fun take ([], i) = []
    | take (x :: xs, i) =
         if i > 0
            then x :: take (xs, i - 1)
         else []

  fun rtake ([], _, taken) = taken
    | rtake (x :: xs, i, taken) =
         if i > 0
            then rtake (xs, i - 1, x :: taken)
         else taken
#+END_SRC

#+RESULTS:
: val take = fn : 'a list * int -> 'a list
: val rtake = fn : 'a list * int * 'a list -> 'a list

** Exercise 3.11

#+BEGIN_SRC sml
  signature ROMAN =
     sig
        exception E
        val fromInt: int -> string
     end

  functor Roman (val d: (int * string) list): ROMAN =
     struct
        exception E

        local val rec loop =
                 fn (0, _, r) => r
                  | (_, [], _) => raise E
                  | (n, d as (v, s) :: d', r) =>
                    if v > n
                       then loop (n, d', r)
                    else loop (n - v, d, r ^ s)
        in
           fun fromInt n = loop (n, d, "")
        end
     end

  structure RomanAdditive =
     Roman (val d = [(1000, "M"),
                     (500, "D"),
                     (100, "C"),
                     (50, "L"),
                     (10, "X"),
                     (5, "V"),
                     (1, "I")])

  structure RomanSubtractive =
     Roman (val d = [(1000, "M"),
                     (900, "CM"),
                     (500, "D"),
                     (400, "CD"),
                     (100, "C"),
                     (90, "XC"),
                     (50, "L"),
                     (40, "XL"),
                     (10, "X"),
                     (9, "IX"),
                     (5, "V"),
                     (4, "IV"),
                     (1, "I")])
#+END_SRC

#+RESULTS:
#+begin_example
signature ROMAN =
  sig
    exception E
    val fromInt : int -> string
  end
functor Roman(<param>: sig val d : (int * string) list end) :
             sig
               exception E
               val fromInt : int -> string
             end
structure RomanAdditive : ROMAN
structure RomanSubtractive : ROMAN
#+end_example

** Exercise 3.12

It will simply ignore larger coins when smaller ones have already been
considered.

** Exercise 3.13

#+BEGIN_SRC sml
  val rec allChange =
     fn (change, _, 0) => [change]
      | (_, [], _) => []
      | (change, (coin, count) :: purse, amount) =>
        if amount < 0 orelse count < 1
           then []
        else allChange ((coin, count) :: change,
                        purse,
                        amount - coin * count)
             @ allChange (change,
                          if count > 0
                             then (coin, count - 1) :: purse
                          else purse,
                          amount)
#+END_SRC

#+RESULTS:
: val allChange = fn
:   : (int * int) list * (int * int) list * int -> (int * int) list list

** Exercise 3.14

#+BEGIN_SRC sml
  use "util.sml";

  val gbCoins = [50, 20, 10, 5, 2, 1]
  val usCoins = [25, 10, 5, 1]

  (* original *)
  fun allChange (coins, coinvals, 0) = [coins]
    | allChange (coins, [], amount) = []
    | allChange (coins, c :: coinvals, amount) =
         if amount < 0
            then []
         else allChange (c :: coins, c :: coinvals, amount - c)
              @ allChange (coins, coinvals, amount)

  (* accumulating *)
  local val rec loop =
           fn (cs, _, 0, r) => cs :: r
            | (_, [], _, r) => r
            | (cs, v :: vs, a, r) =>
              if a < 0
                 then r
              else let val r' = loop (cs, vs, a, r)
                   in
                      loop (v :: cs, v :: vs, a - v, r')
                   end
  in
     fun allChange' (c, v, a) = loop (c, v, a, [])
  end

  val _ = time (fn () => allChange ([], gbCoins, 99)) 100
  val _ = time (fn () => allChange' ([], gbCoins, 99)) 100
#+END_SRC

#+RESULTS:

** Exercise 3.15

#+BEGIN_SRC sml
  use "util.sml";

  structure Binary =
     struct
        exception E

        val ~ = not

        fun (a + b) = a orelse b

        fun (a * b) = a andalso b

        val rec carry =
           fn (false, ps) => ps
            | (true, []) => [true]
            | (true, p :: ps) => ~ p :: carry (p, ps)

        val rec sum =
           fn (c, [], qs) => carry (c, qs)
            | (c, ps, []) => carry (c, ps)
            | (c, p :: ps, q :: qs) =>
              (c <> p <> q) :: sum (c * p + c * q + p * q, ps, qs)

        val rec prod =
           fn ([], _) => []
            | (false :: ps, qs) => false :: prod (ps, qs)
            | (true :: ps, qs) => sum (false, qs, false :: prod (ps, qs))

        val toInt =
           let open Int
           in
              foldr (fn (a, b) => (if a then 1 else 0) +  2 * b) 0
           end

        val fromInt =
           unfoldl (fn n => if n <= 0
                               then NONE
                            else SOME (n div 2, n mod 2 <> 0))

        val toString = implode o rev o map (fn false => #"0"
                                             | true => #"1")

        val fromString = map (fn #"0" => false
                               | #"1" => true
                               | _ => raise E)
                         o rev
                         o explode
     end
#+END_SRC

#+RESULTS:
#+begin_example
structure Binary :
  sig
    exception E
    val ~ : bool -> bool
    val + : bool * bool -> bool
    val * : bool * bool -> bool
    val carry : bool * bool list -> bool list
    val sum : bool * bool list * bool list -> bool list
    val prod : bool list * bool list -> bool list
    val toInt : bool list -> int
    val fromInt : int -> bool list
    val toString : bool list -> string
    val fromString : string -> bool list
  end
#+end_example

** Exercise 3.16

Combining this exercise with 3.17.

** Exercise 3.17

#+NAME: signature_ARITH
#+BEGIN_SRC sml
  signature ARITH =
     sig
        type t

        val zero: t
        val sum: t * t -> t
        val diff: t * t -> t
        val prod: t * t -> t
        val quo: t * t -> t
     end
#+END_SRC

#+NAME: structure_Bin
#+BEGIN_SRC sml :noweb yes
  <<signature_ARITH>>

  structure Bin: ARITH =
     struct
        exception E

        type t = int list

        val zero = [0]

        val base = [0, 1]

        fun reduce ps =
           let val rec loop = fn [] => zero
                               | 0 :: ps => loop ps
                               | ps => rev ps
           in
              loop (rev ps)
           end

        val isZero = List.all (fn p => p = 0)

        fun carry (0, ps) = ps
          | carry (1, []) = [1]
          | carry (1, p :: ps) = (1 - p) :: carry (p, ps)
          | carry _ = raise E

        fun sum' (c, [], qs) = carry (c, qs)
          | sum' (c, ps, []) = carry (c, ps)
          | sum' (c, p :: ps, q :: qs) =
               ((c + p + q) mod 2) :: sum' ((c + p + q) div 2, ps, qs)

        fun sum (a, b) = reduce (sum' (0, a, b))

        fun borrow (0, ps) = SOME ps
          | borrow (_, []) = NONE
          | borrow (1, p :: ps) =
               Option.map (fn ps' => 1 - p :: ps') (borrow (1 - p, ps))
          | borrow _ = raise E

        fun diff' (a, []) = SOME a
          | diff' ([], b) = NONE
          | diff' (p :: ps, q :: qs) =
               if p = 0 andalso q = 1
                  then Option.map (fn x => 1 :: x)
                                  (Option.mapPartial (fn y => diff' (y, qs))
                                                     (borrow (1, ps)))
               else Option.map (fn x => (p - q) :: x) (diff' (ps, qs))

        fun diff (a, b) = reduce (Option.getOpt (diff' (a, b), []))

        fun prod' ([], _) = []
          | prod' (0 :: ps, qs) = 0 :: prod' (ps, qs)
          | prod' (1 :: ps, qs) = sum' (0, qs, 0 :: prod' (ps, qs))
          | prod' _ = raise E

        fun prod (a, b) = reduce (prod' (a, b))

        fun quotRem (n, d) =
           if isZero d
              then raise Div
           else case diff' (n, d) of
                   NONE => ([0], n)
                 | SOME _ => let val (q, r) = quotRem (n, prod' (d, [0, 1]))
                             in
                                case diff' (r, d) of
                                   NONE => (0 :: q, r)
                                 | SOME r' => (1 :: q, r')
                             end

        fun quo (a, b) = reduce (#1 (quotRem (a, b)))
     end
#+END_SRC

#+RESULTS:
#+begin_example
signature ARITH =
  sig
    type t
    val zero : t
    val sum : t * t -> t
    val diff : t * t -> t
    val prod : t * t -> t
    val quo : t * t -> t
  end
structure Bin : ARITH
#+end_example

** Exercise 3.18

#+BEGIN_SRC sml :noweb yes
  <<structure_Bin>>;

  use "util.sml";

  structure Decimal: sig
                        type t
                        val toBinary: t -> Bin.t
                        val fromBinary: Bin.t -> t
                        val factorial: t -> t
                        val factorial100: string
                     end =
     struct
        open IntInf

        type t = int list

        fun toBinary d =
           map toInt (unfoldl (fn n => if n = 0
                                          then NONE
                                       else SOME (n div 2, n mod 2))
                              (foldr (fn (a, b) => a + 10 * b) 0 d))

        fun fromBinary b =
           unfoldl (fn n => if n = 0
                               then NONE
                            else SOME (n div 10, n mod 10))
                   (foldr (fn (a, b) => a + 2 * b) 0 (map fromInt b))

        fun factorial d =
           let fun loop (b, z) =
                  if b = Bin.zero
                     then z
                  else loop (Bin.diff (b, [1]), Bin.prod (b, z))
           in
              fromBinary (loop (toBinary d, [1]))
           end

        val factorial100 =
           (concat o map toString o rev o factorial) [0, 0, 1]
     end
#+END_SRC

#+RESULTS:
: signature ARITH =
:   sig
:     type t
:     val zero : t
:     val sum : t * t -> t
:     val diff : t * t -> t
:     val prod : t * t -> t
:     val quo : t * t -> t
:   end

** Exercise 3.19

They do not consider empty rows (there may be no rows, but not any
empty ones.)  If any row is shorter than the first, the first thing
that will happen is that =headcol= will fail to match.  If any are
longer the excess will be ignored.

** Exercise 3.20
