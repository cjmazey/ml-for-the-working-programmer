* Chapter 2

Names, Functions and Types

** Exercise 2.1

   The SML/NJ interpreter can be started with
#+BEGIN_SRC sh
  sml
#+END_SRC

   A file "foo.sml" can be read in (as if it had been typed) with
#+BEGIN_SRC sml
  use "foo.sml";
#+END_SRC

** Exercise 2.2

   No. . .integers are exact.

** Exercise 2.3

   Just =g=.
#+BEGIN_SRC sml
  fun double n = 2 * n
  fun f u = Math.sin u / u
  fun g k = ~k * k
#+END_SRC

#+RESULTS:
: val double = fn : int -> int
: val f = fn : real -> real
: val g = fn : int -> int

** Exercise 2.4

   In the first case, we'll get whatever character comes before =0=
   and after =9=:
#+BEGIN_SRC sml
  fun digit i = chr (i + ord #"0")

  val x = digit ~1
  val y = digit 10
#+END_SRC

#+RESULTS:
: val digit = fn : int -> char
: val x = #"/" : char
: val y = #":" : char

   In the second case, we will get errors:
#+BEGIN_SRC sml
  fun digit i = String.sub ("0123456789", i)

  val x = digit ~1
  val y = digit 10
#+END_SRC

#+RESULTS:
:
: uncaught exception Subscript [subscript out of bounds]

** Exercise 2.5

#+BEGIN_SRC sml
  fun f (d, m) =
     (m = "January" andalso 1 <= d andalso d <= 31)
     orelse (m = "February" andalso 1 <= d andalso d <= 28)
     orelse (m = "March" andalso 1 <= d andalso d <= 31)
     orelse (m = "April" andalso 1 <= d andalso d <= 30)
     orelse (m = "May" andalso 1 <= d andalso d <= 31)
     orelse (m = "June" andalso 1 <= d andalso d <= 30)
     orelse (m = "July" andalso 1 <= d andalso d <= 31)
     orelse (m = "August" andalso 1 <= d andalso d <= 31)
     orelse (m = "September" andalso 1 <= d andalso d <= 30)
     orelse (m = "October" andalso 1 <= d andalso d <= 31)
     orelse (m = "November" andalso 1 <= d andalso d <= 30)
     orelse (m = "December" andalso 1 <= d andalso d <= 31)

  val x = f (25, "October")
  val y = f (42, "November")
  val z = f (7, "Foobarber")
#+END_SRC

#+RESULTS:
: val f = fn : int * string -> bool
: val x = true : bool
: val y = false : bool
: val z = false : bool

** Exercise 2.6
