#+STARTUP: indent
#+OPTIONS: num:nil
* Chapter 2

Names, Functions and Types

** Exercise 2.1

   The SML/NJ interpreter can be started with
#+BEGIN_SRC sh
  sml
#+END_SRC

   A file "foo.sml" can be read in (as if it had been typed) with
#+BEGIN_SRC sml
  use "foo.sml";
#+END_SRC

** Exercise 2.2

   No. . .integers are exact.

** Exercise 2.3

   Just =g=.
#+BEGIN_SRC sml
  fun double n = 2 * n
  fun f u = Math.sin u / u
  fun g k = ~k * k
#+END_SRC

#+RESULTS:
: val double = fn : int -> int
: val f = fn : real -> real
: val g = fn : int -> int

** Exercise 2.4

   In the first case, we'll get whatever character comes before =0=
   and after =9=:
#+BEGIN_SRC sml
  fun digit i = chr (i + ord #"0")

  val x = digit ~1
  val y = digit 10
#+END_SRC

#+RESULTS:
: val digit = fn : int -> char
: val x = #"/" : char
: val y = #":" : char

   In the second case, we will get errors:
#+BEGIN_SRC sml
  fun digit i = String.sub ("0123456789", i)

  val x = digit ~1
  val y = digit 10
#+END_SRC

#+RESULTS:
:
: uncaught exception Subscript [subscript out of bounds]

** Exercise 2.5

#+BEGIN_SRC sml
  fun f (d, m) =
     1 <= d
     andalso
     (m = "January" andalso d <= 31
      orelse m = "February" andalso d <= 28
      orelse m = "March" andalso d <= 31
      orelse m = "April" andalso d <= 30
      orelse m = "May" andalso d <= 31
      orelse m = "June" andalso d <= 30
      orelse m = "July" andalso d <= 31
      orelse m = "August" andalso d <= 31
      orelse m = "September" andalso d <= 30
      orelse m = "October" andalso d <= 31
      orelse m = "November" andalso d <= 30
      orelse m = "December" andalso d <= 31)

  val x = f (25, "October")
  val y = f (42, "November")
  val z = f (7, "Foobarber")
#+END_SRC

#+RESULTS:
: val f = fn : int * string -> bool
: val x = true : bool
: val y = false : bool
: val z = false : bool

** Exercise 2.6

#+BEGIN_SRC sml
  type time = int * int * string

  fun f (((h1, m1, p1), (h2, m2, p2)) : time * time) : bool =
     p1 < p2   (* "AM" < "PM *)
     orelse p1 = p2
            andalso (h1 < h2
                     orelse h1 = h2
                            andalso m1 < m2)

  val x = f ((11, 59, "AM"), (1, 15, "PM"))
  val y = f ((11, 59, "PM"), (1, 15, "PM"))
  val z = f ((6, 29, "AM"), (6, 33, "AM"))
#+END_SRC

#+RESULTS:
: type time = int * int * string
: val f = fn : time * time -> bool
: val x = true : bool
: val y = false : bool
: val z = true : bool

** Exercise 2.7

#+BEGIN_SRC sml
  fun toPence (pounds, shillings, pence) =
     20 * 12 * pounds + 12 * shillings + pence

  fun fromPence (pence) =
     let val pence' = Int.rem (pence, 12)
         val shillings = Int.quot (pence, 12)
         val shillings' = Int.rem (shillings, 20)
         val pounds = Int.quot (shillings, 20)
     in
        (pounds, shillings', pence')
     end

  fun add (x, y) =
    fromPence (toPence x + toPence y)

  fun sub (x, y) =
    fromPence (toPence x - toPence y)

  val x = add ((1, 0, 0), (0, 0, 240))
  val y = sub ((1, 0, 0), (2, 3, 4))
  val z = sub ((0, 0, 1), (1, 0, 0))
#+END_SRC

#+RESULTS:
: val toPence = fn : int * int * int -> int
: val fromPence = fn : int -> int * int * int
: val add = fn : (int * int * int) * (int * int * int) -> int * int * int
: val sub = fn : (int * int * int) * (int * int * int) -> int * int * int
: val x = (2,0,0) : int * int * int
: val y = (~1,~3,~4) : int * int * int
: val z = (0,~19,~11) : int * int * int

** Exercise 2.8

   Yes, it does.
#+BEGIN_SRC sml
  (* val lifetime : {born: int,
   ,*                 crowned: 'a,
   ,*                 died: int,
   ,*                 name: 'b,
   ,*                 quote: 'c}
   ,*                -> int
   ,*)
  fun lifetime {born, crowned, died, name, quote} = died - born
#+END_SRC

#+RESULTS:
: - = val lifetime = fn : {born:int, crowned:'a, died:int, name:'b, quote:'c} -> int

** Exercise 2.9

   The selector =#born= can be applied to any record with at least
   that label.  The function can only be applied if it is the only label.
#+BEGIN_SRC sml
  (* val born : {born 'a} -> 'a *)

  fun born {born} = born
#+END_SRC

#+RESULTS:
: val born = fn : {born:'a} -> 'a

** Exercise 2.10

#+BEGIN_EXAMPLE
  powOfTwo 8 ⟹ 8 = 1 orelse (even 8 andalso ...)
             ⟹ even 8 andalso powOfTwo (8 div 2)
             ⟹ powOfTwo 4
             ⟹ 4 = 1 orelse (even 4 andalso ...)
             ⟹ even 4 andalso powOfTwo (4 div 2)
             ⟹ powOfTwo 2
             ⟹ 2 = 1 orelse (even 2 andalso ...)
             ⟹ even 2 andalso powOfTwo (2 div 2)
             ⟹ powOfTwo 1
             ⟹ 1 = 1 orelse (even 1 andalso ...)
             ⟹ true
#+END_EXAMPLE

** Exercise 2.11

Yes, it is.  Whenever =powOfTwo= is called recursively, the result of
the call becomes the result of the entire computation.

** Exercise 2.12

#+BEGIN_EXAMPLE
  power (2.0, 29) ⟹ 2.0 * power (4.0, 14)
                  ⟹ 2.0 * power (16.0, 7)
                  ⟹ 2.0 * (16.0 * power (256.0, 3))
                  ⟹ 2.0 * (16.0 * (256.0 * power (65536.0, 1)))
                  ⟹ 2.0 * (16.0 * (256.0 * 65536.0))
                  ⟹ 2.0 * (16.0 * 16777216.0)
                  ⟹ 2.0 * 268435456.0
                  ⟹ 536870912.0
#+END_EXAMPLE

** Exercise 2.13

If the power we're raising to is of the form =2ⁿ - 1=, then every step
will result in two multiplications.  There will be =n - 1= steps, and
therefore =2∙n - 2= multiplications.

** Exercise 2.14

Needless and possibly overflowing additional multiplications at the
end of the computation.  Also, we would have that =0⁰ = 1=.

** Exercise 2.15

Both repeat computations.  Lazy evalutation doesn't help...memoization
would help a lot.

** Exercise 2.16

It is /at least/ exponential in $n$.

Let $F(n)$ denote the number of times $fib$ is called in computing
$fib(n)$.

Note that

\begin{eqnarray*}
   fib(n + 2) & = & fib(n + 1) + fib(n) \\
              & = & fib(n) + fib(n - 1) + fib(n).
\end{eqnarray*}

We therefore have that $F(n + 2) \ge 2 F(n)$.

We know that $F(0) \ge 1$.

Suppose then that $F(2 n) \ge 2^{n}$.  Then

\begin{eqnarray*}
   F(2 (n + 1)) & =   & F(2 n + 2) \\
                & \ge & 2 F(2 n) \\
                & \ge & 2 \cdot 2^{n} \\
                & =   & 2^{n + 1}.
\end{eqnarray*}

so that $F(n) \ge 2^{n}$ for all $n \in \mathbb{N}$.

** Exercise 2.17

#+BEGIN_SRC sml
  fun itfib (n, prev, curr) : IntInf.int =
     if n = 1   (* does not work for n = 0 *)
        then curr
     else itfib (n - 1, curr, prev + curr)

  fun fib n = itfib (n, 0, 1)
#+END_SRC

#+RESULTS:
: val itfib = fn : int * ?.intinf * ?.intinf -> IntInf.int
: val fib = fn : int -> IntInf.int

It seems that $itfib(n, F_{k-1}, F_{k}) = F_{n+k-1}$.

** Exercise 2.18

#+BEGIN_SRC sml
  signature STACK =
     sig
        type 'a t

        exception StackEmpty

        val empty: unit -> 'a t
        val isEmpty: 'a t -> bool
        val push: 'a * 'a t -> unit
        val pop: 'a t -> 'a
     end

  structure Stack:> STACK =
     struct
        type 'a t = 'a list ref

        exception StackEmpty

        val empty = fn () => ref []

        fun isEmpty s = null (!s)

        fun push (x, s) =
           (s := x :: !s
            ; ())

        fun pop s =
           case !s of
              x :: xs => (s := xs
                          ; x)
            | _ => raise StackEmpty
     end

  fun increase (k, n): IntInf.int =
     if (k + 1) * (k + 1) > n
        then k
     else k + 1

  fun intRoot n =
     let val s : IntInf.int Stack.t = Stack.empty ()
         val r = ref 0
         val m = ref n
     in
        (while !m <> 0
         do
            (Stack.push (!m, s)
             ; m := !m div 4)
         ; while (not (Stack.isEmpty s))
           do
              r := increase (2 * !r, Stack.pop s)
         ; !r)
     end
#+END_SRC

#+BEGIN_SRC c
  #include <stdio.h>
  #include <stdlib.h>
  #include <gmp.h>

  /*
   ,* fun increase (k, n) =
   ,*    if (k + 1) * (k + 1) > n
   ,*       then k
   ,*    else k + 1
   ,*/
  void
  increase (mpz_t k, const mpz_t n)
  {
    mpz_t u;

    mpz_init_set (u, k);
    mpz_add_ui (u, u, 1);
    mpz_mul (u, u, u);
    if (mpz_cmp (u, n) <= 0)
      {
        mpz_add_ui (k, k, 1);
      }
    mpz_clear (u);
  }

  /*
   ,* fun introot n =
   ,* if n = 0
   ,*    then 0
   ,* else increase (2 * introot (n div 4), n)
   ,*/
  void
  introot (mpz_t r, const mpz_t n)
  {
    unsigned long int i = 0;
    unsigned long int size = mpz_sizeinbase (n, 4);
    mpz_t *stack = malloc (size * sizeof (mpz_t));

    mpz_set (r, n);
    for (i = 1; i <= size; i++)
      {
        mpz_init_set (*(stack + size - i), r);
        mpz_fdiv_q_ui (r, r, 4);
      }
    for (i = 0; i < size; i++)
      {
        mpz_mul_ui (r, r, 2);
        increase (r, *(stack + i));
        mpz_clear (*(stack + i));
      }
    free (stack);
  }

  int
  main (void)
  {
    mpz_t n, r;

    mpz_inits (n, r, NULL);
    while (gmp_scanf ("%Zd", n) > 0)
      {
        introot (r, n);
        gmp_printf ("%Zd : %Zd\n", n, r);
        fflush (stdout);
      }
    mpz_clears (n, r, NULL);

    return 0;
  }
#+END_SRC

** Exercise 2.19

I have no idea how this compares with Euclid's Algorithm.

#+BEGIN_SRC sml
  local open IntInf
  in
     fun even n = n mod 2 = 0
     fun odd n = n mod 2 = 1
     fun gcd (m, n) =
        if m = n
           then m
        else if even m andalso even n
           then 2 * gcd (m div 2, n div 2)
        else if even m andalso odd n
           then gcd (m div 2, n)
        else if odd m andalso even n
           then gcd (m, n div 2)
        else if m < n
           then gcd ((n - m) div 2, m)
        else gcd ((m - n) div 2, n)
  end
#+END_SRC

#+RESULTS:
: val even = fn : IntInf.int -> bool
: val odd = fn : IntInf.int -> bool
: val gcd = fn : IntInf.int * IntInf.int -> IntInf.int

** Exercise 2.20

Seems like a matter of taste and (shared) context.

#+BEGIN_SRC sml
  fun fib n =
     let fun itfib (n, prev, curr) =
            if n = 1
               then curr
            else itfib (n - 1, curr, prev + curr)
     in
        itfib (n, 0, 1)
     end
#+END_SRC

#+RESULTS:
: val fib = fn : int -> int

** Exercise 2.21

#+BEGIN_SRC sml
  (* fun increase (k, n) =
   ,*    if (k + 1) * (k + 1) > n
   ,*       then k
   ,*    else k + 1
   ,*
   ,* fun introot n =
   ,*    if n = 0
   ,*       then 0
   ,*    else increase (2 * introot (n div 4), n)
   ,*)
  local open IntInf
  in
     fun introot n =
        if n = 0
           then (0, 0)
        else let val n' = n div 4
                 val (k, d) = introot n' (* d = n' - k^2   *)
                 val u = 4 * (n' - d)    (* u = (2k)^2     *)
                 val v = u + 4 * k + 1   (* v = (2k + 1)^2 *)
             in
                if v > n
                   then (2 * k, n - u)
                else (2 * k + 1, n - v)
             end
  end
#+END_SRC

#+RESULTS:
: val introot = fn : ?.intinf -> IntInf.int * IntInf.int

** Exercise 2.22

It just swaps the values.

#+BEGIN_SRC sml
  val pi = 4.0 * Math.atan 1.0
  and e = Math.exp 1.0
  and log2 = Math.ln 2.0

  val (pi, log2) = (log2, pi)
#+END_SRC

#+RESULTS:
: val pi = <hidden-value> : real
: val e = 2.71828182846 : real
: val log2 = <hidden-value> : real
: val pi = 0.69314718056 : real
: val log2 = 3.14159265359 : real

** Exercise 2.23

\begin{equation*}
P_n = 1 + \sum_{k = 1}^{n - 1} P_k
\end{equation*}

Straightforwardly,
#+BEGIN_SRC sml
  fun p n = 1 + s (n - 1)
  and s k = if k < 1
               then 0
            else p k + s (k - 1)
#+END_SRC

#+RESULTS:
: val p = fn : int -> int
: val s = fn : int -> int

This is quite inefficient, and it is in fact just $p(n) = 2^{n - 1}$:

** Exercise 2.24

#+NAME: signature_ARITH
#+BEGIN_SRC sml
  signature ARITH =
     sig
        type t

        val zero: t
        val sum: t * t -> t
        val diff: t * t -> t
        val prod: t * t -> t
        val quo: t * t -> t
     end
#+END_SRC

#+BEGIN_SRC sml :noweb yes
  <<signature_ARITH>>

  local structure Real: ARITH =
           struct
              type t = real

              val zero = 0.0
              val sum = Real.+
              val diff = Real.-
              val prod = Real.*
              val quo = Real./
           end
  in
     structure Foo = Real
  end
#+END_SRC

#+RESULTS:
#+begin_example
signature ARITH =
  sig
    type t
    val zero : t
    val sum : t * t -> t
    val diff : t * t -> t
    val prod : t * t -> t
    val quo : t * t -> t
  end
structure Foo : ARITH
#+end_example

** Exercise 2.25

#+BEGIN_SRC sml :noweb yes
  <<signature_ARITH>>

  structure Rational: ARITH =
     struct
        open IntInf

        type t = int * int

        fun gcd (a, b) =
           if a = 0
              then b
           else gcd (b mod a, a)

        fun red (n, d) =
           let val s = if sameSign (n, d) then 1 else ~1
               val (n', d') = (abs n, abs d)
               val v = gcd (n', d')
           in
              (s * n' div v, d' div v)
           end

        val zero: t = (0, 1)

        fun sum ((n, d), (n', d')) =
           red (n * d' + d * n', d * d')

        fun diff (q, (n, d)) =
           sum (q, (~n, ~d))

        fun prod ((n, d), (n', d')) =
           red (n * n', d * d')

        fun quo (q, (n, d)) =
           prod (q, (d, n))
     end
#+END_SRC

#+RESULTS:
#+begin_example
signature ARITH =
  sig
    type t
    val zero : t
    val sum : t * t -> t
    val diff : t * t -> t
    val prod : t * t -> t
    val quo : t * t -> t
  end
structure Rational : ARITH
#+end_example

** Exercise 2.26

- =1= is an int type, and defaults to =int=, as we've not said
  otherwise
- We compare =n= to =1=, so =n= must be =int=
- =prev= and =curr= must be the same numeric types, as they are added
  together.  We cause them to be =IntInf.int=s.
- Since =curr= can be a result of =itfib=, =itfib='s return type is
  the same as its.

#+BEGIN_SRC sml
  fun itfib (n, prev, curr : IntInf.int) =
     if n = 1
        then curr
     else itfib (n - 1, curr, prev + curr)
#+END_SRC

#+RESULTS:
: val itfib = fn : int * ?.intinf * IntInf.int -> IntInf.int

** Exercise 2.27

Type checking fails.  =f='s argument must be a pair, and =k - 1= can
not be a pair, as it must be some int type.

#+BEGIN_SRC sml
  fun f (k, m) = if k = 0 then 1 else f (k - 1)
#+END_SRC

#+RESULTS:
: stdIn:384.12-386.7 Error: operator and operand don't agree [overload conflict]
:   operator domain: [- ty] * 'Z
:   operand:         [- ty]
:   in expression:
