#+STARTUP: indent
* Chapter 2

Names, Functions and Types

** Exercise 2.1

   The SML/NJ interpreter can be started with
#+BEGIN_SRC sh
  sml
#+END_SRC

   A file "foo.sml" can be read in (as if it had been typed) with
#+BEGIN_SRC sml
  use "foo.sml";
#+END_SRC

** Exercise 2.2

   No. . .integers are exact.

** Exercise 2.3

   Just =g=.
#+BEGIN_SRC sml
  fun double n = 2 * n
  fun f u = Math.sin u / u
  fun g k = ~k * k
#+END_SRC

#+RESULTS:
: val double = fn : int -> int
: val f = fn : real -> real
: val g = fn : int -> int

** Exercise 2.4

   In the first case, we'll get whatever character comes before =0=
   and after =9=:
#+BEGIN_SRC sml
  fun digit i = chr (i + ord #"0")

  val x = digit ~1
  val y = digit 10
#+END_SRC

#+RESULTS:
: val digit = fn : int -> char
: val x = #"/" : char
: val y = #":" : char

   In the second case, we will get errors:
#+BEGIN_SRC sml
  fun digit i = String.sub ("0123456789", i)

  val x = digit ~1
  val y = digit 10
#+END_SRC

#+RESULTS:
:
: uncaught exception Subscript [subscript out of bounds]

** Exercise 2.5

#+BEGIN_SRC sml
  fun f (d, m) =
     1 <= d
     andalso
     (m = "January" andalso d <= 31
      orelse m = "February" andalso d <= 28
      orelse m = "March" andalso d <= 31
      orelse m = "April" andalso d <= 30
      orelse m = "May" andalso d <= 31
      orelse m = "June" andalso d <= 30
      orelse m = "July" andalso d <= 31
      orelse m = "August" andalso d <= 31
      orelse m = "September" andalso d <= 30
      orelse m = "October" andalso d <= 31
      orelse m = "November" andalso d <= 30
      orelse m = "December" andalso d <= 31)

  val x = f (25, "October")
  val y = f (42, "November")
  val z = f (7, "Foobarber")
#+END_SRC

#+RESULTS:
: val f = fn : int * string -> bool
: val x = true : bool
: val y = false : bool
: val z = false : bool

** Exercise 2.6

#+BEGIN_SRC sml
  type time = int * int * string

  fun f (((h1, m1, p1), (h2, m2, p2)) : time * time) : bool =
     p1 < p2   (* "AM" < "PM *)
     orelse p1 = p2
            andalso (h1 < h2
                     orelse h1 = h2
                            andalso m1 < m2)

  val x = f ((11, 59, "AM"), (1, 15, "PM"))
  val y = f ((11, 59, "PM"), (1, 15, "PM"))
  val z = f ((6, 29, "AM"), (6, 33, "AM"))
#+END_SRC

#+RESULTS:
: type time = int * int * string
: val f = fn : time * time -> bool
: val x = true : bool
: val y = false : bool
: val z = true : bool

** Exercise 2.7

#+BEGIN_SRC sml
  fun toPence (pounds, shillings, pence) =
     20 * 12 * pounds + 12 * shillings + pence

  fun fromPence (pence) =
     let val pence' = Int.rem (pence, 12)
         val shillings = Int.quot (pence, 12)
         val shillings' = Int.rem (shillings, 20)
         val pounds = Int.quot (shillings, 20)
     in
        (pounds, shillings', pence')
     end

  fun add (x, y) =
    fromPence (toPence x + toPence y)

  fun sub (x, y) =
    fromPence (toPence x - toPence y)

  val x = add ((1, 0, 0), (0, 0, 240))
  val y = sub ((1, 0, 0), (2, 3, 4))
  val z = sub ((0, 0, 1), (1, 0, 0))
#+END_SRC

#+RESULTS:
: val toPence = fn : int * int * int -> int
: val fromPence = fn : int -> int * int * int
: val add = fn : (int * int * int) * (int * int * int) -> int * int * int
: val sub = fn : (int * int * int) * (int * int * int) -> int * int * int
: val x = (2,0,0) : int * int * int
: val y = (~1,~3,~4) : int * int * int
: val z = (0,~19,~11) : int * int * int

** Exercise 2.8

   Yes, it does.
#+BEGIN_SRC sml
  (* val lifetime : {born: int,
   ,*                 crowned: 'a,
   ,*                 died: int,
   ,*                 name: 'b,
   ,*                 quote: 'c}
   ,*                -> int
   ,*)
  fun lifetime {born, crowned, died, name, quote} = died - born
#+END_SRC

#+RESULTS:
: - = val lifetime = fn : {born:int, crowned:'a, died:int, name:'b, quote:'c} -> int

** Exercise 2.9

   The selector =#born= can be applied to any record with at least
   that label.  The function can only be applied if it is the only label.
#+BEGIN_SRC sml
  (* val born : {born 'a} -> 'a *)

  fun born {born} = born
#+END_SRC

#+RESULTS:
: val born = fn : {born:'a} -> 'a

** Exercise 2.10

#+BEGIN_EXAMPLE
  powOfTwo 8 => 8 = 1 orelse (even 8 andalso ...)
             => even 8 andalso powOfTwo (8 div 2)
             => powOfTwo 4
             => 4 = 1 orelse (even 4 andalso ...)
             => even 4 andalso powOfTwo (4 div 2)
             => powOfTwo 2
             => 2 = 1 orelse (even 2 andalso ...)
             => even 2 andalso powOfTwo (2 div 2)
             => powOfTwo 1
             => 1 = 1 orelse (even 1 andalso ...)
             => true
#+END_EXAMPLE

** Exercise 2.11

Yes, it is.  Whenever =powOfTwo= is called recursively, the result of
the call becomes the result of the entire computation.

** Exercise 2.12
